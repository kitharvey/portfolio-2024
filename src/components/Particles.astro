---
const {
  className = "",
  quantity = 500,
  staticity = 50,
  ease = 50,
  size = 0.1,
  color = "#000",
  vx = 0,
  vy = 0,
} = Astro.props;
---

<div
  class={className}
  id="canvas-container"
  data-quantity={quantity}
  data-staticity={staticity}
  data-ease={ease}
  data-size={size}
  data-color={color}
  data-vx={vx}
  data-vy={vy}
  aria-hidden="true"
>
  <canvas id="particle-canvas" class="size-full"></canvas>
</div>

<script is:inline>
  const canvasContainer = document.getElementById("canvas-container");
  const canvas = document.getElementById("particle-canvas");
  const context = canvas.getContext("2d");
  let circles = [];
  let mouse = { x: 0, y: 0 };
  let canvasSize = { w: 0, h: 0 };
  const dpr = window.devicePixelRatio || 1;

  // Get props from the canvas container's dataset
  const {
    quantity = "500",
    staticity = "10",
    ease = "100",
    size = "0.1",
    color = "#000",
    vx = "0",
    vy = "0",
  } = canvasContainer?.dataset || {};

  function hexToRgb(hex) {
    hex = hex.replace("#", "");
    if (hex.length === 3) {
      hex = hex
        .split("")
        .map((char) => char + char)
        .join("");
    }
    const hexInt = parseInt(hex, 16);
    const red = (hexInt >> 16) & 255;
    const green = (hexInt >> 8) & 255;
    const blue = hexInt & 255;
    return [red, green, blue];
  }

  const rgb = hexToRgb(color);

  function circleParams() {
    const x = Math.floor(Math.random() * canvasSize.w);
    const y = Math.floor(Math.random() * canvasSize.h);
    const translateX = 0;
    const translateY = 0;
    const pSize = Math.floor(Math.random() * 2) + parseFloat(size);
    const alpha = 0;
    const targetAlpha = parseFloat((Math.random() * 0.6 + 0.1).toFixed(1));
    const dx = (Math.random() - 0.5) * 0.1;
    const dy = (Math.random() - 0.5) * 0.1;
    const magnetism = 0.1 + Math.random() * 4;
    return {
      x,
      y,
      translateX,
      translateY,
      size: pSize,
      alpha,
      targetAlpha,
      dx,
      dy,
      magnetism,
    };
  }

  function resizeCanvas() {
    if (canvasContainer && canvas && context) {
      circles.length = 0;
      canvasSize.w = canvasContainer.offsetWidth;
      canvasSize.h = canvasContainer.offsetHeight;
      canvas.width = canvasSize.w * dpr;
      canvas.height = canvasSize.h * dpr;
      canvas.style.width = `${canvasSize.w}px`;
      canvas.style.height = `${canvasSize.h}px`;
      context.scale(dpr, dpr);
      drawParticles();
    }
  }

  function clearContext() {
    if (context) {
      context.clearRect(0, 0, canvasSize.w, canvasSize.h);
    }
  }

  function drawCircle(circle, update = false) {
    if (context) {
      const { x, y, translateX, translateY, size, alpha } = circle;
      context.translate(translateX, translateY);
      context.beginPath();
      context.arc(x, y, size, 0, 2 * Math.PI);
      context.fillStyle = `rgba(${rgb.join(", ")}, ${alpha})`;
      context.fill();
      context.setTransform(dpr, 0, 0, dpr, 0, 0);

      if (!update) {
        circles.push(circle);
      }
    }
  }

  function drawParticles() {
    clearContext();
    for (let i = 0; i < parseInt(quantity); i++) {
      const circle = circleParams();
      drawCircle(circle);
    }
  }

  function remapValue(value, start1, end1, start2, end2) {
    let remapped =
      ((value - start1) * (end2 - start2)) / (end1 - start1) + start2;
    return remapped > 0 ? remapped : 0;
  }

  function animate() {
    clearContext();
    circles.forEach((circle, i) => {
      const edge = [
        circle.x + circle.translateX - circle.size,
        canvasSize.w - circle.x - circle.translateX - circle.size,
        circle.y + circle.translateY - circle.size,
        canvasSize.h - circle.y - circle.translateY - circle.size,
      ];
      const closestEdge = edge.reduce((a, b) => Math.min(a, b));
      const remapClosestEdge = parseFloat(
        remapValue(closestEdge, 0, 20, 0, 1).toFixed(2),
      );
      if (remapClosestEdge > 1) {
        circle.alpha += 0.02;
        if (circle.alpha > circle.targetAlpha) {
          circle.alpha = circle.targetAlpha;
        }
      } else {
        circle.alpha = circle.targetAlpha * remapClosestEdge;
      }
      circle.x += circle.dx + parseFloat(vx);
      circle.y += circle.dy + parseFloat(vy);
      circle.translateX +=
        (mouse.x / (parseFloat(staticity) / circle.magnetism) -
          circle.translateX) /
        parseFloat(ease);
      circle.translateY +=
        (mouse.y / (parseFloat(staticity) / circle.magnetism) -
          circle.translateY) /
        parseFloat(ease);

      drawCircle(circle, true);

      if (
        circle.x < -circle.size ||
        circle.x > canvasSize.w + circle.size ||
        circle.y < -circle.size ||
        circle.y > canvasSize.h + circle.size
      ) {
        circles.splice(i, 1);
        const newCircle = circleParams();
        drawCircle(newCircle);
      }
    });
    window.requestAnimationFrame(animate);
  }

  function onMouseMove(event) {
    if (canvas) {
      let rect = canvas.getBoundingClientRect();
      let { w, h } = canvasSize;
      let x = event.clientX - rect.left - w / 2;
      let y = event.clientY - rect.top - h / 2;
      let inside = x < w / 2 && x > -w / 2 && y < h / 2 && y > -h / 2;
      if (inside) {
        mouse.x = x;
        mouse.y = y;
      }
    }
  }

  resizeCanvas();
  animate();
  window.addEventListener("resize", resizeCanvas);
  window.addEventListener("mousemove", onMouseMove);

  window.addEventListener("unload", () => {
    window.removeEventListener("resize", resizeCanvas);
    window.removeEventListener("mousemove", onMouseMove);
  });
</script>

<style>
  #canvas-container {
    position: fixed;
    top: 0;
    left: 0;
    height: 100dvh;
    width: 100vw;
    z-index: -1;
  }
  .size-full {
    width: 100%;
    height: 100%;
  }
</style>
